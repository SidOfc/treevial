Execute (setting up test environment and helpers):
  let g:__vader_testing__   = 1
  let g:__vader_repo_root__ = getcwd()
  let g:__vader_test_root__ = __vader_repo_root__ . '/tmp-test'

  function! IsSelected(expected) abort
    return len(filter(treevial#selection(),
             \ {_, entry -> substitute(entry.path, g:__vader_test_root__ . '/', '', '') ==? a:expected}))
  endfunction

  function! TestSetup(...) abort
    Log '-+-+-+-+-+-+-+-'
    call mkdir(g:__vader_test_root__, 'p')
    exe 'chdir' g:__vader_test_root__
    call TestWith(get(a:000, 0, []))
  endfunction

  function! TestWith(paths) abort
    let root = getcwd()
    for path in a:paths
      let abs_path      = root . '/' . path
      let parent_dir    = fnamemodify(abs_path, ':h')
      if path =~? '.::.'
        let assume_exists = path =~? '^!'
        let [from, to]    = split(path[(assume_exists):], '::')
        let abs_from      = root . '/' . from
        let abs_to        = root . '/' . to
        let abs_to_dir    = fnamemodify(substitute(abs_to, '/$', '', ''), ':h')

        if !assume_exists
          call TestWith([from])
        endif

        call mkdir(abs_to_dir, 'p')
        call system('ln -s ' . shellescape(abs_from) . ' ' . shellescape(abs_to))
      elseif path =~? '*$'
        call mkdir(parent_dir, 'p')
        call writefile([], abs_path[:-2], 'b')
        call system('chmod +x ' . shellescape(abs_path[:-2]))
      elseif path =~? '/$'
        call mkdir(abs_path, 'p')
      else
        call mkdir(parent_dir, 'p')
        call writefile([], abs_path, 'b')
      endif
    endfor

    Treevial
  endfunction

  function! TestTeardown() abort
    exe 'chdir!' g:__vader_repo_root__
    call delete(g:__vader_test_root__, 'rf')
  endfunction

  function! TestConfirmChoice(choice) abort
    let g:__treevial_vader_confirm_reply__ = a:choice
  endfunction

Before:
  call TestSetup([
    \ 'example.txt',
    \ 'example.sh*',
    \ 'example.sh::example.ln',
    \ '!broken::broken.ln',
    \ 'folded-dir/directory/',
    \ 'folded-file/file/example.txt',
    \ '!folded-dir/::folded-sym',
    \ 'expandable/1.txt',
    \ 'expandable/2.txt',
    \ 'expandable/deep/3.txt',
    \ 'expandable/deep/4.txt'
    \ ])

After:
  call TestTeardown()

================================================================================

Execute (buffer has name "treevial"):
  Assert bufexists('treevial')

================================================================================

Execute (buffer has filetype "treevial"):
  AssertEqual 'treevial', getbufvar('treevial', '&filetype')

================================================================================

Execute (buffer is readonly):
  AssertEqual 1, getbufvar('treevial', '&readonly')

================================================================================

Expect (buffer lists contents):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (creating a selection using <Tab> shows selection marks):
  ggj\<Tab>

Expect (buffer shows selection marks):
  tmp-test/
  ▸ expandable/
  • folded-dir/directory/
  • folded-file/file/example.txt
  • folded-sym/directory/
  • broken.ln
  • example.ln
  • example.sh
  • example.txt

================================================================================

Do (unmark using <u> hides selection marks):
  ggj\<Tab>u

Expect (buffer no longer shows selection marks):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (expand a directory with <enter>):
  ggj\<Cr>

Expect (buffer shows expanded directory):
  tmp-test/
  ▾ expandable/
    ▸ deep/
      1.txt
      2.txt
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (create a new file):
  ggc/nested/directory/c.txt\<Cr>

Then (newly created file exists):
  Assert filereadable('nested/directory/c.txt')

Expect (buffer shows newly created file):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    nested/directory/c.txt
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (create a new directory):
  ggc/directory/\<Cr>

Then (newly created file exists):
  Assert isdirectory('directory')

Expect (buffer shows newly created file):
  tmp-test/
    directory/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (rename a directory):
  ggjm\<Bs>-renamed\<Cr>

Then (target is directory):
  Assert isdirectory('expandable-renamed')
  Assert !isdirectory('expandable')

Expect (buffer shows renamed directory):
  tmp-test/
  ▸ expandable-renamed/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (rename a file):
  gg7jm\<Left>\<Left>\<Left>-renamed\<Cr>

Then (target is file):
  Assert filereadable('example-renamed.sh')
  Assert !filereadable('example.sh')

Expect (buffer shows renamed file):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example-renamed.sh
    example.ln
    example.txt

================================================================================

Do (move multiple files and directories):
  ggj\<Cr>j\<Tab>\<Tab>mdestination\<Cr>ggj\<Cr>

Then (all selected entries have been moved):
  Assert !filereadable('expandable/1.txt')
  Assert !isdirectory('expandable/deep')
  Assert filereadable('destination/1.txt')
  Assert isdirectory('destination/deep')

Expect (buffer shows moved files):
  tmp-test/
  ▾ destination/
    ▸ deep/
      1.txt
    expandable/2.txt
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (unmarking a child entry deep within the tree unmarks all parents):
  ggj\<Tab>k\<Cr>j\<Tab>

Then (parent is unmarked):
  Assert !IsSelected('expandable/')
  Assert !IsSelected('expandable/deep/')
  Assert IsSelected('expandable/1.txt')
  Assert IsSelected('expandable/2.txt')

================================================================================

Execute (stub confirm answer for delete):
  call TestConfirmChoice(2)

Do (marking and deleting a folded path only deletes the last component):
  gg3j\<Tab>d

Then (only last component is deleted):
  Assert !filereadable('folded-file/file/example.txt')
  Assert isdirectory('folded-file/file/')

================================================================================

Execute (stub confirm answer for delete):
  call TestConfirmChoice(2)

Do (delete a directory):
  ggjd

Then (directory is deleted):
  Assert !isdirectory('expandable')

Expect (buffer no longer shows deleted directory):
  tmp-test/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Execute (stub confirm answer for delete):
  call TestConfirmChoice(2)

Do (Select multiple entries and delete them):
  ggj\<Tab>\<Tab>d

Then (selected entries are deleted):
  Assert !isdirectory('expandable')
  Assert !isdirectory('folded-dir/directory')

Expect (buffer no longer shows deleted entries):
  tmp-test/
    folded-dir/
    folded-file/file/example.txt
    folded-sym/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Execute (stub confirm answer for delete):
  call TestConfirmChoice(1)

Do (delete a directory):
  ggjd

Then (directory is not deleted):
  Assert isdirectory('expandable')

Expect (buffer shows directory):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (move into a directory):
  ggj=

Expect (buffer shows new root directory):
  expandable/
  ▸ deep/
    1.txt
    2.txt

================================================================================

Do (move into a deeply nested directory):
  ggj\<Cr>j=

Expect (buffer shows new root directory):
  deep/
    3.txt
    4.txt

================================================================================

Do (move up a directory):
  ggj=-

Expect (buffer shows original root directory):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (move up multiple directories by preceding a count):
  ggj\<Cr>j=2-

Expect (buffer shows original root directory):
  tmp-test/
  ▸ expandable/
    folded-dir/directory/
    folded-file/file/example.txt
    folded-sym/directory/
    broken.ln
    example.ln
    example.sh
    example.txt

================================================================================

Do (move into a folded directory):
  ggjj=

Expect (buffer shows new root directory):
  folded-dir/
    directory/

================================================================================

Do (move deeper into a folded directory):
  ggjj2=

Expect (buffer shows new root directory):
  directory/
