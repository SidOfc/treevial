*treevial.txt*                                            a plain directory tree
*treevial*

  `Version:  0.1.0`
  `Licence:  MIT`
  `Source:   https://github.com/SidOfc/treevial`
  `Author:   Sidney Liebrand <sidneyliebrand@gmail.com>`

  Treevial isn't perfect, but it also isn't &readonly + &modified.

==============================================================================
TABLE OF CONTENTS                                                 *treevial-toc*

  To quickly jump to this global table of contents, use |gg| or |go|.

  This section describes the global table of contents, to view the contents
  of a specific topic, jump there first using :h treevial-[topic] with one
  of the topics listed below:

  MAPPINGS ................. |treevial-mappings|
  CUSTOM MAPPINGS .......... |treevial-custom-mappings|
  HIGHLIGHTING ............. |treevial-highlighting|

==============================================================================
MAPPINGS                                                     *treevial-mappings*

  Treevial supports the following mappings:

  NAVIGATION
  <CR> ..................... |treevial-cr|
  <S-CR> ................... |treevial-s-cr| (neovim only by default!)
  <C-V> .................... |treevial-c-v|
  <C-X> .................... |treevial-c-x|

  MARKING / UNMARKING
  <Tab> .................... |treevial-tab|
  <S-Tab> .................. |treevial-s-tab|
  <u> ...................... |treevial-u|

  CREATING / DELETING / MOVING / RENAMING
  <c> ...................... |treevial-c|
  <d> ...................... |treevial-d|
  <m> ...................... |treevial-m|


<CR> `:call treevial#open()<CR>`                                   *treevial-<cr>*
                                                                   *treevial-cr*

  Pressing <CR> (return / enter) on your keyboard will perform a different
  action depending on the entry below the cursor.

  When the cursor is on the root directory (line 1), pressing <CR> will no-op.
  When on a file, pressing <CR> will open that file in the current window.
  When on a directory, pressing <CR> will toggle its state to open or closed.

<S-CR> `:call treevial#open({'shift': 1})<CR>`                   *treevial-<s-cr>*
                                                                 *treevial-s-cr*

  Like |treevial-<s-cr>| but when closing a directory, it will also
  recursively close all child directories. This lets you quickly close huge
  file trees after finding the file you need. This functionality does not work
  for opening directories recursively.

  NOTE: there are many issues with <S-CR> mappings since it depends on your
  terminal emulator / (n)vim setup. (n)vim may or may not be able to see the
  difference between <S-CR> and regular <CR>.

  With some configuration I managed to get <S-CR> working on neovim but not
  yet on plain vim. For this reason, this key is only mapped in neovim!


<C-V> `:call treevial#open({'command': 'vspl', dirs: 0})<CR>`     *treevial-<c-v>*
                                                                  *treevial-c-v*

  Pressing <C-V> will not put you in |visual-block| mode. Instead, Treevial
  uses this key combination to open a file in a vertical split (|vsplit|).

  This mapping will no-op when on the root directory (line 1) or when trying
  to use this mapping on a directory.


<C-X> `:call treevial#open({'command': 'spl', dirs: 0})<CR>`      *treevial-<c-x>*
                                                                  *treevial-c-x*

  Like |treevial-<c-v>|, but using a horizontal |split|.


<Tab> `:call treevial#mark()<CR>`                                 *treevial-<tab>*
                                                                  *treevial-tab*

  Pressing <Tab> will mark or unmark the entry below the cursor. After
  marking the current entry, the cursor will be moved down one line. This is
  convenient for selecting a list of files in descending order.

  This mapping will no-op when on the root directory (line 1).


<S-Tab> `:call treevial#mark({'shift': 1})<CR>`                 *treevial-<s-tab>*
                                                                *treevial-s-tab*

  Like |treevial-<tab>|, but moves up one line instead of down. This one is
  convenient for selecting a list of files in ascending order.


<u> `:call treevial#unmark_all()<CR>`                               *treevial-<u>*
                                                                    *treevial-u*

  Pressing <u> will unmark all marked entries.


<d> `:call treevial#destroy()<CR>`                                  *treevial-<d>*
                                                                    *treevial-d*

  Pressing <d> will delete a file or directory (recursively!).

  This mapping will no-op when on the root directory (line 1).

  When no files / directories are marked, the entry below the cursor will be
  deleted after user confirmation.

  When one or more files / directories are marked, these files will be deleted
  after user confirmation.


<c> `:call treevial#create()<CR>`                                   *treevial-<c>*
                                                                    *treevial-c*

  Pressing <c> will prompt the user using Vim's |input| prompt for a
  destination to create. When the destination ends in a '/' a directory
  will be created instead of a file.

  Any parent directories will be created as needed.

  Checks are performed before creating the destination file / directory.
  If destination exists, it will ask the user to overwrite or cancel.


<m> `:call treevial#move()<CR>`                                     *treevial-<m>*
                                                                    *treevial-m*

  Pressing <m> will move a file or directory. The destination is requested
  using Vim's built-in |input| prompt with {completion} set to 'dir'.

  The destination does not have to exist, if it does not it will be created.

  This mapping will no-op when on the root directory (line 1).

  When no files / directories are marked, the entry below the cursor will be
  moved to a new location after user confirmation. This functionality can be
  used to rename files and directories as well.

  When one or more  files / directories are marked, these will be moved
  to the destination directory after user confirmation.

  Some checks are also performed to ensure that moving one or more files /
  directories will not cause conflicts. This includes making sure that all
  the files to move (marked / cursor entry) have a unique filename. If
  this is not the case, the user will be asked if duplicates should
  be unmarked. This is done automatically.

  After this is done, the remaining files are checked against the
  destination if it exists, and if any files in the destination would be
  overwritten then the user has to confirm this or choose to unmark
  conflicting files and continue.

  Finally, checks will be performed to ensure that directories are not
  copied "into" themselves or would otherwise overwrite the directory
  they would be moved from, the user can choose to cancel or unmark
  and continue.

==============================================================================
CUSTOM MAPPINGS                                       *treevial-custom-mappings*

  Treevial understands that it must not interfere with user defined mappings.
  While it does not perform lots of magic checks, there is a way to disable
  all mappings that Treevial defines otherwise.

  To disable the default mappings, set `g:treevial_default_mappings = 0` in
  your vimrc. If it is not set, it will default to `1` unless |v:version|
  is below `703`. This is because the default mappings use <nowait> which
  is not supported before (n)vim version `703`.

  After disabling the mappings, you may want to define your own custom
  mappings for Treevial instead. This can be done with a special |autocmd|
  called `TreevialMappings` and can be used like this:

      autocmd! User TreevialMappings
      autocmd  User TreevialMappings
        \ nnoremap <silent><nowait><buffer> u :call treevial#unmark_all()<Cr>

  This autocmd gets called if it exists and after the default mappings have
  been processed. For more complex configurations and mappings, using a
  function is much more flexible. The following example disables
  all the default mappings and uses the autocmd to enable them:

      function! MappingsForTreevial() abort
        nnoremap <silent><nowait><buffer> <Cr>    :call treevial#open()<Cr>
        nnoremap <silent><nowait><buffer> <Tab>   :call treevial#mark()<Cr>
        nnoremap <silent><nowait><buffer> d       :call treevial#destroy()<Cr>
        nnoremap <silent><nowait><buffer> m       :call treevial#move()<Cr>
        nnoremap <silent><nowait><buffer> c       :call treevial#create()<Cr>
        nnoremap <silent><nowait><buffer> u
            \ :call treevial#unmark_all()<Cr>

        nnoremap <silent><nowait><buffer> <S-Tab>
            \ :call treevial#mark({'shift': 1})<Cr>

        nnoremap <silent><nowait><buffer> <C-v>
            \ :call treevial#open({'command': 'vspl', 'dirs:' 0})<Cr>

        nnoremap <silent><nowait><buffer> <C-x>
            \ :call treevial#open({'command': 'spl',  'dirs': 0})<Cr>

        if has('nvim')
          nnoremap <silent><nowait><buffer> <S-Cr>
              \ :call treevial#open({'shift': 1})<Cr>
        endif
      endfunction

      let g:treevial_default_mappings = 0
      autocmd! User TreevialMappings
      autocmd  User TreevialMappings call MappingsForTreevial()

  This gives you full control over what is mapped and how it is mapped.

==============================================================================
HIGHLIGHTING                                 *treevial-hl* *treevial-highlighting*

  Treevial highlights files and directories based on their type.
  The following types exist:

  TYPE                     HIGHLIGHT GROUP ~
  directory                TreevialDir
  file                     TreevialFile
  executable               TreevialExecutable
  symlink                  TreevialSymlink
  broken symlink           TreevialBrokenSymlink

  Besides marking files and directories, there is an extra highlight group
  for the directory open / closed indicator:

  WHAT                     HIGHLIGHT GROUP ~
  directory marker         TreevialDirState

  When starting a selection, a special mode is activated with the following
  highlighting rules:

  WHAT                     HIGHLIGHT GROUP ~
  file                     TreevialDefaultMark
  marked file / directory  TreevialSelectedMark
  unselected directory
  containing some marked
  files / directories      TreevialPartialMark

  To get information about any of the above highlight groups, please consult
  Vim's |:verbose| command to find out more about applied colors, for example,
  to get info about symlink highlighting:

  `:verbose hi TreevialSymlink`

  Every highlight group mentioned above is defined using the `default`
  (|hi-default|) keyword and may be overridden by the user, this allows full
  customization of any and all colors shown by Treevial.

vim:tw=78:sw=2:ft=help:norl:
